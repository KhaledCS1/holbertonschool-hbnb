classDiagram
    class PresentationLayer {
        <<package>>
        API Endpoints
        - User Management API
        - Place Management API  
        - Review Management API
        - Amenity Management API
        Services
        - UserService
        - PlaceService
        - ReviewService
        - AmenityService
    }
    
    class FacadeInterface {
        <<interface>>
        +userOperations(operation, data)
        +placeOperations(operation, data)
        +reviewOperations(operation, data)
        +amenityOperations(operation, data)
        +validateRequest(request)
        +formatResponse(data)
    }
    
    class BusinessLogicLayer {
        <<package>>
        Entity Models
        - User Model
        - Place Model
        - Review Model
        - Amenity Model
        Business Rules
        - Validation Logic
        - Relationship Management
        - Permission Checks
    }
    
    class PersistenceLayer {
        <<package>>
        Repositories
        - UserRepository
        - PlaceRepository
        - ReviewRepository
        - AmenityRepository
        Database Interface
        - Connection Management
        - Transaction Handling
        - Query Execution
    }
    
    class Database {
        <<database>>
        +users_table
        +places_table
        +reviews_table
        +amenities_table
        +place_amenities_table
    }
    
    PresentationLayer ..> FacadeInterface : uses
    FacadeInterface ..> BusinessLogicLayer : delegates to
    BusinessLogicLayer ..> PersistenceLayer : persists via
    PersistenceLayer --> Database : stores in
    
    note for PresentationLayer "Handles external communication and user interactions"
    note for FacadeInterface "Simplifies complex subsystem interactions"
    note for BusinessLogicLayer "Contains core application logic and rules"
    note for PersistenceLayer "Manages data storage and retrieval"
